<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.mybatis.mapper.BookMapper">
    <!--
        开启二级缓存
        1. type
            配置分布式缓存处理类
        2. eviction
            设置缓存的驱逐算法
                a. LRU  最近最少使用算法（默认）
                b. FIFO 先进先出，最早保留的数据会优先清除
                c. SOFT 采用JAVA软引用机制，GC触发后根据内存占用情况执行清除
                d. WEAK 采用JAVA弱引用，只要执行GC，立即清空。
        3. flushInterval
            设置缓存的刷新间隔
        4. size
            设置缓存占用内存的大小，不建议修改
        5. readOnly
            是否设置为只读缓存，
            一般的缓存分为读写缓存、只读缓存、只写缓存，
            如果使用的是读写缓存，那么在进行缓存的时候，就要考虑数据更新的问题，但是这种更新有可能会有很严重的性能问题，所以一般设置为只读缓存。
        6. blocking
            是否要开启缓存的阻塞队列，默认为false不启用。
            当设置为true启用队列时，在进行数据查询时会对相应的数据进行锁定，
            如果缓存在使用中已经明确进行了命中处理，其他线程将无法直接对此数据进行修改，并且将阻止的修改线程设置到缓存队列中。
     -->
    <cache type="com.ssm.mybatis.cache.MybatisRedisSerializeDefinedCache"/>
<!--    <cache type="com.ssm.mybatis.cache.MybatisRedisCache"/>-->
    <resultMap id="BaseResultMap" type="com.ssm.mybatis.vo.Book">
            <id property="bid" column="bid" jdbcType="BIGINT"/>
            <result property="title" column="title" jdbcType="VARCHAR"/>
            <result property="author" column="author" jdbcType="VARCHAR"/>
            <result property="price" column="price" jdbcType="DOUBLE"/>
    </resultMap>

    <!-- 定义一个基本查询的sql语句-->
    <sql id="base_select">
        select bid, title, author, price from book
    </sql>

    <!-- 定义一个增加的sql语句-->
    <insert id="doCreate" parameterType="com.ssm.mybatis.vo.Book"
            keyProperty="bid" keyColumn="bid" useGeneratedKeys="true">
        insert into book(title, author, price) values (#{title}, #{author}, #{price});
    </insert>
    <insert id="doCreateWithBid" parameterType="com.ssm.mybatis.vo.Book">
        insert into book(bid, title, author, price) values (#{bid}, #{title}, #{author}, #{price});
    </insert>
    <insert id="doCreateBatch" parameterType="Book">
        insert into book(title, author, price) values
        <foreach collection="list" separator="," item="book">
            (#{book.title}, #{book.author}, #{book.price})
        </foreach>
    </insert>

    <!-- 数据库不支持返回自增ID的情况 -->
    <insert id="doCreateAdapterOracle" parameterType="com.ssm.mybatis.vo.Book">
        insert into book(title, author, price) values (#{title}, #{author}, #{price});
        <selectKey keyProperty="bid" keyColumn="bid" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <!-- Mybatis映射文件配置中insert、update、delete三个配置项作用是一样的，随意使用，但尽量按标准来 -->
    <!-- 可以直接使用Book作为parameterType，是因为在mybatis.cfg中定义了typeAlias -->
    <update id="doEdit" parameterType="Book" >
        update book
        <set>
            <if test="title != null">title=#{title},</if>
            <if test="author != null">author=#{author},</if>
            <if test="price != null">price=#{price},</if>
        </set>
        where bid=#{bid}
    </update>
    <!-- 相比于 doEdit 增加了部分校验 -->
    <update id="doEditOptimize" parameterType="Book" >
        update book
        <set>
            <if test="title != null and title != &quot;&quot;">title=#{title},</if>
            <if test='author != null and author != ""'>author=#{author},</if>
            <if test="price != null and price !=0">price=#{price},</if>
        </set>
        <where>
            <if test="bid != null">
                bid=#{bid}
            </if>
            <if test="bid == null">
                bid=-1
            </if>
        </where>
    </update>

    <delete id="doRemove" parameterType="java.lang.Long" >
        <!-- 删除操作一定要有条件，防止全表删除，所以此时不能用"where标签"，非空判定防止调用方 -->
        delete from book where bid=#{bid}
    </delete>

    <delete id="doRemoveBatch" parameterType="java.lang.Long" >
        delete from book
        <where>
            bid IN
            <!-- 定义foreach结果的时候需要配置有数据类型的集合，一般为数组和list两种 -->
            <!-- array 表示接收的是一个数组 -->
            <foreach collection="array" open="(" close=")" separator="," item="bid">
                #{bid}
            </foreach>
        </where>
    </delete>

    <!-- 定义数据查询操作，根据ID查询需要传递数据的主键，返回结果为VO对象实例 -->
    <select id="findById" parameterType="java.lang.Long" resultType="Book">
        <include refid="base_select" /> where bid=#{bid}
    </select>
    <select id="findByIds" parameterType="java.lang.Long" resultType="Book">
        <include refid="base_select" />
        <where>
            bid IN
            <foreach collection="array" open="(" close=")" separator="," item="bid">
                #{bid}
            </foreach>
        </where>
    </select>
    <!-- 不使用缓存的查询 -->
    <select id="findByIdNoCache" parameterType="java.lang.Long" resultType="Book" useCache="false">
        <include refid="base_select" /> where bid=#{bid}
    </select>

    <!-- 查询全部数据返回的肯定是一个List集合，但是此处定义的是List保存项的类型 -->
    <select id="findAll" resultType="Book">
        <include refid="base_select" />
    </select>

    <!-- 分页数据查询的时候，需要传递若干个数据项，只能通过Map集合进行传递 -->
    <!-- 要传递的内容包括：模糊查询列，模糊的关键字，起始行，每次加载的数量 -->
    <!-- MyBatis内部使用的是PreparedStatement, 所以"#{}"转为"?","${}"转为具体的内容 -->
    <select id="findSplit" parameterType="java.util.Map" resultType="Book">
        <include refid="base_select" />
        <where>
            ${column} like #{keyword} limit #{start}, #{lineSize}
        </where>
    </select>

    <select id="getAllCount" parameterType="java.util.Map" resultType="java.lang.Long">
        select  count(*) from book
        <where>
            ${column} like #{keyword}
        </where>
    </select>

    <!-- 动态查询 -->
    <select id="findByColumn" parameterType="Book" resultType="Book">
        <include refid="base_select" />
        <where>
            <if test="bid != null and bid != &quot;&quot;">
                and bid = #{bid}
            </if>
            <if test="title != null and title != &quot;&quot;">
                and title = #{title}
            </if>
            <if test="author != null and author != &quot;&quot;">
                and author = #{author}
            </if>
            <if test="price != null and price != 0.0">
                and price = #{price}
            </if>
        </where>
    </select>

    <!-- 动态新增 -->
    <insert id="doDynamicCreate" parameterType="Book"
            keyProperty="bid" keyColumn="bid" useGeneratedKeys="true">
        insert into book(title, author, price) values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title == null or title == &quot;&quot;">
                'NoTitle',
            </if>
            <if test="title != null and title != &quot;&quot;">
                #{title},
            </if>
            <if test="author == null or author == &quot;&quot;">
                'NoAuthor',
            </if>
            <if test="author != null and author != &quot;&quot;">
                #{author},
            </if>
            <if test="price == null or price == 0.0">
                -1,
            </if>
            <if test="price != null and price != 0.0">
                #{price},
            </if>
        </trim>
    </insert>

    <!-- 多条件查询 -->
    <select id="findByCondition" parameterType="Book" resultType="Book">
        <!-- 如果查询时根据条件，可能不希望出现where，可以使用where标签 -->
        <include refid="base_select" />
        <where>
            <choose>
                <when test="title != null and author != null">
                    title=#{title} AND author=#{author}
                </when>
                <when test="title != null and author == null">
                    title=#{title}
                </when>
                <when test="title == null and author != null">
                    author=#{author}
                </when>
                <otherwise>
                    <!--
                        默认的查询条件，能够保证程序不出错。
                        但是加了该项会影响性能，因为对于数据库查询来讲，where语句是逐行匹配的模式。
                     -->
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>
    <select id="findByConditionOptimize" parameterType="Book" resultType="Book">
        <!-- 如果查询时根据条件，可能不希望出现where，可以使用where标签 -->
        <include refid="base_select" />
        <where>
            <choose>
                <when test="title != null and author != null">
                    title=#{title} AND author=#{author}
                </when>
                <when test="title != null and author == null">
                    title=#{title}
                </when>
                <when test="title == null and author != null">
                    author=#{author}
                </when>
                <!--
                    相比于 findByCondition, 此处优化掉了"otherwise标签"，
                    当"when标签"没有匹配时，"when标签"就不会使用where语句，就不会执行"1=1"的逐行匹配，从而执行全量查询
                -->
            </choose>
        </where>
    </select>
    <!-- 存储过程（单个返回） -->
    <select id="producerSingle" parameterType="string" resultType="Book"
            statementType="CALLABLE">
        {call book_select_proc(#{param, jdbcType=VARCHAR, mode=IN})}
    </select>
    <!-- 定义返回结果 -->
    <resultMap id="CountMap" type="java.lang.Integer">
        <result column="count" property="value" />  <!-- Integer中的属性保存就是value -->
    </resultMap>
    <!-- 存储过程（多个返回） -->
    <select id="producerMulti"
            parameterType="map" resultMap="BaseResultMap, CountMap" resultSets="books, count"
            statementType="CALLABLE" useCache="false">
        {call book_multi_select_proc(
            #{start, jdbcType=INTEGER, mode=IN},
            #{size, jdbcType=INTEGER, mode=IN}
            )}
    </select>
</mapper>
