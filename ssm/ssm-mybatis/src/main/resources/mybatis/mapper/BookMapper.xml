<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.mybatis.mapper.BookMapper">
    <resultMap id="BaseResultMap" type="com.ssm.mybatis.vo.Book">
            <id property="bid" column="bid" jdbcType="BIGINT"/>
            <result property="title" column="title" jdbcType="VARCHAR"/>
            <result property="author" column="author" jdbcType="VARCHAR"/>
            <result property="price" column="price" jdbcType="DOUBLE"/>
    </resultMap>

    <sql id="Base_Column_List">
        bid, title, author, price
    </sql>
    <!-- 定义一个增加的sql语句-->
    <insert id="doCreate" parameterType="com.ssm.mybatis.vo.Book"
            keyProperty="bid" keyColumn="bid" useGeneratedKeys="true">
        insert into test_sql.book(title, author, price) values (#{title}, #{author}, #{price});
    </insert>

    <!-- 数据库不支持返回自增ID的情况 -->
    <insert id="doCreateAdapterOracle" parameterType="com.ssm.mybatis.vo.Book">
        insert into test_sql.book(title, author, price) values (#{title}, #{author}, #{price});
        <selectKey keyProperty="bid" keyColumn="bid" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <!-- Mybatis映射文件配置中insert、update、delete三个配置项作用是一样的，随意使用，但尽量按标准来 -->
    <!-- 可以直接使用Book作为parameterType，是因为在mybatis.cfg中定义了typeAlias -->
    <update id="doEdit" parameterType="Book" >
        update test_sql.book set title=#{title}, author=#{author}, price=#{price}
        <where>
            bid=#{bid}
        </where>
    </update>

    <delete id="doRemove" parameterType="java.lang.Long" >
        delete from test_sql.book
        <where>
            bid=#{bid}
        </where>
    </delete>
    <!-- 定义数据查询操作，根据ID查询需要传递数据的主键，返回结果为VO对象实例 -->
    <select id="findById" parameterType="java.lang.Long" resultType="Book">
        select bid, title, author, price from test_sql.book where bid=#{bid}
    </select>
    <!-- 查询全部数据返回的肯定是一个List集合，但是此处定义的是List保存项的类型 -->
    <select id="findAll" resultType="Book">
        select bid, title, author, price from test_sql.book
    </select>
    <!-- 分页数据查询的时候，需要传递若干数据项，只能通过Map集合进行传递 -->
    <!-- 要传递的内容包括：模糊的查询列，模糊的关键字，起始行，每次加载的数量 -->
    <!-- MyBatis内部使用的是PreparedStatement, 所以"#{}"转为"?","${}"转为具体的内容 -->
    <select id="findSplit" parameterType="java.util.Map" resultType="Book">
        select bid, title, author, price from test_sql.book
        <where>
            ${column} like #{keyword} limit #{start}, #{lineSize}
        </where>
    </select>
    <select id="getAllCount" parameterType="java.util.Map" resultType="java.lang.Long">
        select  count(*) from test_sql.book
        <where>
            ${column} like #{keyword}
        </where>
    </select>
</mapper>
