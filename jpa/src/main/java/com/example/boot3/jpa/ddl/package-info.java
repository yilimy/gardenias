/**
 * JPA
 * <p>
 *     处理数据库字段修改
 *     在传统的项目开发中，常规的做法是先进行数据表的创建，而后再围绕数据库表进行业务功能的实现。
 *     在每次业务发生改变时，也是先进行表结构的修改，再进行程序的变更，这样的数据库维护是非常繁琐的，
 *     考虑到数据库更新以及数据库移植方面的设计，在Hibernate中提供了DDL自动创建以及表更新策略。
 *     对于当前市面上可见到的ORM开发框架而言，只有JPA标准规定了数据库移植的话题，而Hibernate实现了JPA标准，
 *     所以只有Hibernate开发框架具有移植性的功能，而像大家所熟悉的Mybatis是没有这个功能的。
 *     DDL 更新策略
 *          create
 *                  每次加载时都会删除上一次生成的表，然后根据用户定义的实体类重新生成新的表数据，
 *                  由于每次执行都会执行表的重新创建，所以执行后将导致原始数据丢失
 *          create-drop
 *                  每次加载时会根据实体类生成数据库表，但是EntityManagerFactory实例一关闭，对应的数据表将自动删除
 *          update
 *                  最常用的DDL操作属性，第一次加载程序时会根据实体类自动创建数据库表（此时必须首先创建好数据库），
 *                  在以后重新加载JPA程序时，将根据实体类的结构，自动更新表结构，同时会保留有原始数据记录。
 *                  要注意的是，当部署到服务器后，表结构是不会立马创建的，是要等应用第一次运行起来后才创建。
 *          validate
 *                  每次加载hibernate时，验证创建数据库表结构，只会和数据库表进行比较，不会创建新表，但是会插入新值
 * <p>
 *     修改 persistence.xml 配置文件，进行DDL自动更新的定义
 * @author caimeng
 * @date 2024/6/7 10:56
 */
package com.example.boot3.jpa.ddl;